import json
import requests, sys
from intervaltree import Interval, IntervalTree
import click

server = "https://rest.ensembl.org"

class ExonCoords:
    def __init__(self,chromosome, strand, breakpoint, exons):
        self._chrom = chromosome    # string            - should be inmutable
        self._strand = strand       # -1, None, or 1    - ditto
        self.breakpoint = breakpoint
        self.exons = exons

    @property
    def breakpoint(self):           # int
        return self._breakpoint
    @breakpoint.setter
    def breakpoint(self,value):
        self._breakpoint = value

    @property
    def exons(self):                # IntervalTree()
        return self._exons
    @exons.setter   
    def exons(self,exs):
        self._exons = exs


class SV_Maker:
    """
    Joins coordinates of exons for two genes
    """
    def __init__(self,p5,p3, start, end):
        """
        """
        self.prime5 = ExonCoords(p5[0], p5[1], 0, p5[3])
        self.prime3 = ExonCoords(p3[0], p3[1], 0, p3[3])

        # now assign breakpoints to genes:
        # since using the Manta VCF line it is not yet clear 
        # which gene contain which endpoint, we have to assign 
        # them separately
        self.assign_breakpoint(start)
        self.assign_breakpoint(end)

        print("prime 5 breakpoint:", self.prime5.breakpoint)
        print("prime 3 breakpoint:", self.prime3.breakpoint)
    
    def assign_breakpoint(self,bp):
        for gene in [self.prime5, self.prime3]:
            gene_coords = gene.exons
            gene_ends = IntervalTree()
            gene_ends.add(Interval(gene_coords.begin(), gene_coords.end()))
            if gene_ends.at(bp):
                print("Gene coords: ", gene_ends, " breakpoint: ", bp)
                gene.breakpoint = bp

    def fuse_genes(self):
        return 0

def get_CDS_coords(ENS_ID):
    # look docs at https://rest.ensembl.org/
    print("Looking up " + ENS_ID)
    ext = "/lookup/id/" + ENS_ID + "?expand=1"
    r = requests.get(server+ext, headers={ "Content-Type" : "application/json"})
    if not r.ok:
        r.raise_for_status()
        sys.exit()
    obj = r.json()
    # now go through the Transcript list
    transcripts = obj['Transcript']
    chromosome = "chr" + str(obj['seq_region_name'])
    exon_intervals = IntervalTree()
    for trs in transcripts:
        # go through each transcript, and store coordinate intervals
        for exon in trs['Exon']:
            start = exon['start']
            end = exon['end']
            exon_intervals.add(Interval(start,end))
    exon_intervals.merge_overlaps()
    return(chromosome, obj['strand'], 0, IntervalTree(sorted(exon_intervals.items())) )


# This is the surrogate for main(): everything happens here

@click.command(context_settings = dict( help_option_names = ['-h', '--help'] ))
@click.option('--vcf',      '-v', type=str, help='VCF file to get SVs generated by Manta', required=True)

def print_SV(vcf):
    # read the VCF file:
    vcf_file = open(vcf,'r')
    for line in vcf_file:
        line = line.rstrip()
        sv_call = line.split("\t")
        if sv_call[4] == "<DUP:TANDEM>":
            start = int(sv_call[1])  # column 2 is the SV starting point in the call - just we do not know yet the name of the gene
            snpEff_ann = sv_call[7].split("|")
            # Munching through the "END=140789598;SVTYPE=DUP;SVLEN=1932669;CIPOS=0,1;CIEND=0,1;HOMLEN=1;HOMSEQ=G;SOMATIC;SOMATICSCORE=85;ANN=<DUP:TANDEM>" string to get 140789598
            end = int(snpEff_ann[0].split(";")[0].replace("END=",""))
            ENS_genes = snpEff_ann[4].split("&")
            prime_5 = get_CDS_coords(ENS_genes[0])
            prime_3 = get_CDS_coords(ENS_genes[1])
            #print("5 prime CDS: ", prime_5)
            #print("3 prime CDS: ", prime_3)
            #print(start,end)
            fusion = SV_Maker(prime_5,prime_3, start, end)

if __name__ == "__main__":
    print_SV()
